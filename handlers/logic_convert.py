
import aiohttp
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from bot import bot
from config import EXCHANGE_RATES_API_URL, API_KEY_EXCHANGE_RATES
from aiogram.dispatcher.filters.state import StatesGroup, State


class StateConvert(StatesGroup):
    from_currency = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ "–∏–∑ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"
    to_currency = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"
    amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ "–∫–∞–∫–∞—è —Å—É–º–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"


async def start_convert_currency(message: types.Message):
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç')
    await StateConvert.from_currency.set()


async def get_from_currency(message: types.Message, state: StateConvert):
    data_from_currency = message.text.upper()
    async with aiohttp.ClientSession() as session:
        headers = {"apikey": API_KEY_EXCHANGE_RATES}
        url = f'{EXCHANGE_RATES_API_URL}latest?symbols=&base='
        async with session.get(url, headers=headers) as response:
            available_currencies_data = await response.json()
            available_currencies = available_currencies_data['rates'].keys()  # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        if data_from_currency not in available_currencies:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await message.reply(
               '–£–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç.')
            await StateConvert.from_currency.set()
        else:
            async with state.proxy() as data:
                data["from_currency"] = data_from_currency
                await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å')
                await StateConvert.to_currency.set()


async def get_to_currency(message: types.Message, state: StateConvert):
    data_to_currency = message.text.upper()
    async with aiohttp.ClientSession() as session:
        headers = {"apikey": API_KEY_EXCHANGE_RATES}
        url = f'{EXCHANGE_RATES_API_URL}latest?symbols=&base='
        async with session.get(url, headers=headers) as response:
            available_currencies_data = await response.json()
            available_currencies = available_currencies_data['rates'].keys()  # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        if data_to_currency not in available_currencies:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await message.reply(
               '–£–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç.')
            await StateConvert.to_currency.set()
        else:
            async with state.proxy() as data:
                data["to_currency"] = data_to_currency
                await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É')
                await StateConvert.amount.set()


async def get_amount(message: types.Message, state: StateConvert):
    data_amount = message.text
    if data_amount.isdigit(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º
        async with aiohttp.ClientSession() as session:
            headers = {"apikey": API_KEY_EXCHANGE_RATES}
            async with state.proxy() as data:
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                url = f"{EXCHANGE_RATES_API_URL}convert?to={data['to_currency']}&from={data['from_currency']}&amount={data_amount}"
                async with session.get(url, headers=headers) as response: # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç
                    exchange_rates_data = await response.json()
                    result = exchange_rates_data['result']
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    await bot.send_message(message.from_user.id, f"{data_amount} {data['from_currency']} üí± -> {result} {data['to_currency']}")
                    await state.finish()

    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑
        await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã
        await StateConvert.amount.set()


def register_convert(dp : Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
    dp.register_message_handler(start_convert_currency, Text(equals='üí±–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', ignore_case=True))
    dp.register_message_handler(get_from_currency, state=StateConvert.from_currency)
    dp.register_message_handler(get_to_currency, state=StateConvert.to_currency)
    dp.register_message_handler(get_amount, state=StateConvert.amount)


